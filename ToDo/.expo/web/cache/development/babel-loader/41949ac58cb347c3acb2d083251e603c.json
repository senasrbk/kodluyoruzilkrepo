{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"./Save.style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SaveBar = function SaveBar(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      change = _useState2[0],\n      setChange = _useState2[1];\n\n  var inputChange = function inputChange(text) {\n    text === '' ? setChange(true) : setChange(false);\n    setToDoValue(text);\n  };\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      toDoValue = _useState4[0],\n      setToDoValue = _useState4[1];\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Yapilacak...\",\n      placeholderTextColor: '#7a7f81',\n      multiline: true,\n      onChangeText: inputChange,\n      value: toDoValue\n    }), change ? _jsx(TouchableOpacity, {\n      style: styles.button_null,\n      onPress: props.onSave,\n      disabled: true,\n      children: _jsx(Text, {\n        style: styles.button_text,\n        children: \"Kaydet\"\n      })\n    }) : _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: function onPress() {\n        return props.onSave(toDoValue);\n      },\n      children: _jsx(Text, {\n        style: styles.button_text,\n        children: \"Kaydet\"\n      })\n    })]\n  });\n};\n\nexport default Save;","map":{"version":3,"sources":["C:/Users/Sena/OneDrive/Documents/Sites/deneme/kodluyoruzilkrepo/ToDo/src/components/Save/Save.js"],"names":["React","useState","styles","SaveBar","props","change","setChange","inputChange","text","setToDoValue","toDoValue","container","input","button_null","onSave","button_text","button","Save"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;AAEA,OAAOC,MAAP;;;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AACvB,kBAA4BH,QAAQ,CAAC,IAAD,CAApC;AAAA;AAAA,MAAOI,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,IAAI,EAAI;AAC1BA,IAAAA,IAAI,KAAK,EAAT,GAAcF,SAAS,CAAC,IAAD,CAAvB,GAAgCA,SAAS,CAAC,KAAD,CAAzC;AACAG,IAAAA,YAAY,CAACD,IAAD,CAAZ;AACD,GAHD;;AAIA,mBAAkCP,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOS,SAAP;AAAA,MAAkBD,YAAlB;;AACA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEP,MAAM,CAACS,SAApB;AAAA,eACE,KAAC,SAAD;AACE,MAAA,KAAK,EAAET,MAAM,CAACU,KADhB;AAEE,MAAA,WAAW,EAAC,cAFd;AAGE,MAAA,oBAAoB,EAAE,SAHxB;AAIE,MAAA,SAAS,EAAE,IAJb;AAKE,MAAA,YAAY,EAAEL,WALhB;AAME,MAAA,KAAK,EAAEG;AANT,MADF,EASGL,MAAM,GACL,KAAC,gBAAD;AACE,MAAA,KAAK,EAAEH,MAAM,CAACW,WADhB;AAEE,MAAA,OAAO,EAAET,KAAK,CAACU,MAFjB;AAGE,MAAA,QAAQ,EAAE,IAHZ;AAAA,gBAIE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEZ,MAAM,CAACa,WAApB;AAAA;AAAA;AAJF,MADK,GAQL,KAAC,gBAAD;AACE,MAAA,KAAK,EAAEb,MAAM,CAACc,MADhB;AAEE,MAAA,OAAO,EAAE;AAAA,eAAMZ,KAAK,CAACU,MAAN,CAAaJ,SAAb,CAAN;AAAA,OAFX;AAAA,gBAGE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAER,MAAM,CAACa,WAApB;AAAA;AAAA;AAHF,MAjBJ;AAAA,IADF;AA0BD,CAjCD;;AAkCA,eAAeE,IAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport {Text, View, TextInput, TouchableOpacity} from 'react-native';\r\nimport styles from './Save.style';\r\n\r\nconst SaveBar = props => {\r\n  const [change, setChange] = useState(true);\r\n  const inputChange = text => {\r\n    text === '' ? setChange(true) : setChange(false);\r\n    setToDoValue(text);\r\n  };\r\n  const [toDoValue, setToDoValue] = useState('');\r\n  return (\r\n    <View style={styles.container}>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Yapilacak...\"\r\n        placeholderTextColor={'#7a7f81'}\r\n        multiline={true}\r\n        onChangeText={inputChange}\r\n        value={toDoValue}\r\n      />\r\n      {change ? (\r\n        <TouchableOpacity\r\n          style={styles.button_null}\r\n          onPress={props.onSave}\r\n          disabled={true}>\r\n          <Text style={styles.button_text}>Kaydet</Text>\r\n        </TouchableOpacity>\r\n      ) : (\r\n        <TouchableOpacity\r\n          style={styles.button}\r\n          onPress={() => props.onSave(toDoValue)}>\r\n          <Text style={styles.button_text}>Kaydet</Text>\r\n        </TouchableOpacity>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\nexport default Save;"]},"metadata":{},"sourceType":"module"}